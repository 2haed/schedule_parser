Index: main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from qparser import ScheduleParser\r\nimport sys\r\n\r\n\r\ndef main():\r\n    group_name = input('Print group name to see schedule\\nor -1 to exit: ')\r\n    if group_name == str(-1):\r\n        print('Bye!')\r\n        sys.exit(0)\r\n    else:\r\n        with ScheduleParser(driver=None, schedule=None) as parser:\r\n            parser.get_schedule(group_name.lower())\r\n            df = parser.build_dataframe()\r\n            print(df)\r\n\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.py b/main.py
--- a/main.py	(revision fb02eb430d76b190e13ecb8e978c091f5ce720d1)
+++ b/main.py	(date 1664815566285)
@@ -1,17 +1,21 @@
 from qparser import ScheduleParser
+# from calendar_client import GoogleCalendar
+from constants import calendar_id
 import sys
 
 
 def main():
-    group_name = input('Print group name to see schedule\nor -1 to exit: ')
+    # group_name = input('Print group name to see schedule\nor -1 to exit: ')
+    group_name = '15.25Д-ЭКФ05/20б'
     if group_name == str(-1):
         print('Bye!')
         sys.exit(0)
     else:
-        with ScheduleParser(driver=None, schedule=None) as parser:
+        with ScheduleParser() as parser:
             parser.get_schedule(group_name.lower())
-            df = parser.build_dataframe()
-            print(df)
+            json = parser.get_days()
+            for key, val in json.items():
+                print(f'{key}: {val}')
 
 
 if __name__ == '__main__':
Index: calendar_client.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from google.oauth2 import service_account\r\nfrom googleapiclient.discovery import build\r\nimport pprint\r\n\r\n\r\nclass GoogleCalendar:\r\n    SCOPES = ['https://www.googleapis.com/auth/calendar']\r\n    FILE_PATH = 'calendar_client.json'\r\n\r\n    def __init__(self):\r\n        credentials = service_account.Credentials.from_service_account_file(\r\n            filename=self.FILE_PATH, scopes=self.SCOPES\r\n        )\r\n        self.service = build('calendar', 'v3', credentials=credentials)\r\n\r\n    def get_calendar_list(self):\r\n        return self.service.calendarList().list().execute()\r\n\r\n    def add_calendar(self, calendar_id):\r\n        calendar_list_entry = {\r\n            'id' : calendar_id\r\n        }\r\n        return self.service.calendarList().insert(body=calendar_list_entry).execute()\r\n\r\n    def add_event(self, calendar_id, body):\r\n        return self.service.events().insert(calendarId=calendar_id, body=body).execute()\r\n\r\n\r\nobj = GoogleCalendar()\r\ncalendar = '5bbb23ea64f80456fb760707752c52beae7c217258745cc06c78c5f999c8f530@group.calendar.google.com'\r\n# pprint.pprint(obj.get_calendar_list())\r\n\r\nevent = {\r\n  'summary': 'РўРµСЃС‚РѕРІС‹Р№ РёРІРµРЅС‚',\r\n  'location': 'Р СЌСѓ',\r\n  'description': 'РўРµСЃС‚РѕРІРѕРµ РѕРїРёСЃР°РЅРёРµ',\r\n  'start': {\r\n    'date': '2022-10-04',\r\n  },\r\n  'end': {\r\n    'date': '2022-10-04',\r\n  },\r\n}\r\n\r\nevent = obj.add_event(calendar_id=calendar, body=event)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>windows-1251
===================================================================
diff --git a/calendar_client.py b/calendar_client.py
--- a/calendar_client.py	(revision fb02eb430d76b190e13ecb8e978c091f5ce720d1)
+++ b/calendar_client.py	(date 1664807890207)
@@ -1,6 +1,7 @@
 from google.oauth2 import service_account
 from googleapiclient.discovery import build
-import pprint
+from qparser import ScheduleParser
+from constants import calendar_id
 
 
 class GoogleCalendar:
@@ -18,7 +19,7 @@
 
     def add_calendar(self, calendar_id):
         calendar_list_entry = {
-            'id' : calendar_id
+            'id': calendar_id
         }
         return self.service.calendarList().insert(body=calendar_list_entry).execute()
 
@@ -26,20 +27,20 @@
         return self.service.events().insert(calendarId=calendar_id, body=body).execute()
 
 
-obj = GoogleCalendar()
-calendar = '5bbb23ea64f80456fb760707752c52beae7c217258745cc06c78c5f999c8f530@group.calendar.google.com'
-# pprint.pprint(obj.get_calendar_list())
-
-event = {
-  'summary': 'РўРµСЃС‚РѕРІС‹Р№ РёРІРµРЅС‚',
-  'location': 'Р СЌСѓ',
-  'description': 'РўРµСЃС‚РѕРІРѕРµ РѕРїРёСЃР°РЅРёРµ',
-  'start': {
-    'date': '2022-10-04',
-  },
-  'end': {
-    'date': '2022-10-04',
-  },
-}
-
-event = obj.add_event(calendar_id=calendar, body=event)
\ No newline at end of file
+group_name = input('Print group name to see schedule\nor -1 to exit: ')
+with ScheduleParser() as parser, GoogleCalendar() as calendar:
+    parser.get_schedule(group_name.lower())
+    df = parser.build_dataframe()
+    obj = GoogleCalendar()
+    event = {
+        'summary': 'ForeignLanguage',
+        'location': '2 building 208 a Site: Main',
+        'description': '1 pare',
+        'start': {
+            'date': '08:30',
+        },
+        'end': {
+            'date': '10:00',
+        },
+    }
+    event = obj.add_event(calendar_id=calendar_id, body=event)
Index: qparser.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from selenium import webdriver\r\nfrom selenium.webdriver.chrome.service import Service\r\nfrom selenium.webdriver.common.by import By\r\nimport pandas as pd\r\nimport sys\r\nfrom constants import time\r\nfrom dataclasses import dataclass\r\n\r\n\r\n@dataclass\r\nclass ScheduleParser:\r\n    URL = 'https://rasp.rea.ru/?q='\r\n    OPTIONS = webdriver.ChromeOptions().add_argument('headless')\r\n    SERVICE = Service('yandexdriver.exe')\r\n    driver: str\r\n    schedule: str\r\n\r\n    def get_schedule(self, group_name: str) -> None:\r\n        self.driver.get('{}{}'.format(self.URL, group_name))\r\n        self.driver.implicitly_wait(1)\r\n        try:\r\n            if self.driver.find_element(By.CSS_SELECTOR, 'table'):\r\n                self.schedule = self.driver.find_elements(By.CSS_SELECTOR, 'table')\r\n        except Exception:\r\n            print(self.driver.find_element(By.CSS_SELECTOR, 'h2').text,\r\n                  self.driver.find_element(By.CSS_SELECTOR, 'h3').text, sep='\\n')\r\n            sys.exit(0)\r\n\r\n    def get_info(self, finder) -> list:\r\n        return [finder(table) for table in self.schedule]\r\n\r\n    def build_dataframe(self) -> pd.DataFrame:\r\n        dataframe = pd.DataFrame(index=time)\r\n        lst = []\r\n        new_schedule = []\r\n        for pare in self.get_info(lambda x: x.find_elements(By.CLASS_NAME, 'slot')):\r\n            lst.append([x.text.strip().replace('\\n', ' ') for x in pare])\r\n        for line in lst:\r\n            new_schedule.append(\r\n                [(' '.join(x.split()[:4]), ' '.join(x.split()[4:])) for x in line if len(x.split()) != 2])\r\n        for line in new_schedule:\r\n            if not line:\r\n                line.append(('1 РїР°СЂР° 08:30 10:00', 'Р—Р°РЅСЏС‚РёСЏ РѕС‚СЃСѓС‚СЃС‚РІСѓСЋС‚'))\r\n        for day, line in enumerate(new_schedule):\r\n            idx, values = zip(*line)\r\n            dataframe.loc[list(idx), [day]] = pd.Series(values, list(idx))\r\n        for index, day in enumerate(self.get_info(lambda x: x.find_element(By.CSS_SELECTOR, 'h5').text.capitalize())):\r\n            dataframe = dataframe.rename(columns={index: day})\r\n        dataframe = dataframe.fillna('-')\r\n        return dataframe\r\n\r\n    def __enter__(self):\r\n        self.driver = webdriver.Chrome(service=self.SERVICE, options=self.OPTIONS)\r\n        return self\r\n\r\n    def __exit__(self, exc_type, exc_val, exc_tb):\r\n        self.driver.quit()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>windows-1251
===================================================================
diff --git a/qparser.py b/qparser.py
--- a/qparser.py	(revision fb02eb430d76b190e13ecb8e978c091f5ce720d1)
+++ b/qparser.py	(date 1664828693462)
@@ -3,17 +3,20 @@
 from selenium.webdriver.common.by import By
 import pandas as pd
 import sys
-from constants import time
-from dataclasses import dataclass
+from constants import time, days
+import re
+import itertools
 
 
-@dataclass
 class ScheduleParser:
     URL = 'https://rasp.rea.ru/?q='
-    OPTIONS = webdriver.ChromeOptions().add_argument('headless')
+    OPTIONS = webdriver.ChromeOptions()
+    OPTIONS.add_argument('headless')
     SERVICE = Service('yandexdriver.exe')
-    driver: str
-    schedule: str
+
+    def __init__(self):
+        self.driver = None
+        self.schedule = None
 
     def get_schedule(self, group_name: str) -> None:
         self.driver.get('{}{}'.format(self.URL, group_name))
@@ -29,24 +32,43 @@
     def get_info(self, finder) -> list:
         return [finder(table) for table in self.schedule]
 
-    def build_dataframe(self) -> pd.DataFrame:
-        dataframe = pd.DataFrame(index=time)
+    def get_day(self):
+        pass
+
+    def get_normal_schedule(self) -> list[list[tuple[str, str, str]]]:
         lst = []
         new_schedule = []
         for pare in self.get_info(lambda x: x.find_elements(By.CLASS_NAME, 'slot')):
             lst.append([x.text.strip().replace('\n', ' ') for x in pare])
+        print(lst, '\n')
         for line in lst:
             new_schedule.append(
-                [(' '.join(x.split()[:4]), ' '.join(x.split()[4:])) for x in line if len(x.split()) != 2])
-        for line in new_schedule:
-            if not line:
-                line.append(('1 РїР°СЂР° 08:30 10:00', 'Р—Р°РЅСЏС‚РёСЏ РѕС‚СЃСѓС‚СЃС‚РІСѓСЋС‚'))
+                [(' '.join(x.split()[:4]), re.findall(r'\d+', ' '.join(x.split()[4:])) if len(re.findall(r'\d+', ' '.join(x.split()[4:]))) > 1 else None) for x in line if len(x.split()) != 2])
+        return new_schedule
+
+    def get_days(self) -> dict:
+        lst = [[x.text.strip().replace('\n', ' ') for x in pare] for pare in self.get_info(lambda x: x.find_elements(By.CLASS_NAME, 'slot'))]
+        dictionary = {}
+        for day, pares in zip(days, lst):
+            dictionary[day] = [pare for pare in pares if len(pare.split()) > 2]
+            if not dictionary[day]:
+                del dictionary[day]
+        return dictionary
+
+    def build_json(self) -> dict:
+        new_schedule = self.get_normal_schedule()
+        print(new_schedule)
+        # return dict
+
+    def build_dataframe(self) -> pd.DataFrame:
+        dataframe = pd.DataFrame(index=time)
+        new_schedule = self.get_normal_schedule()
         for day, line in enumerate(new_schedule):
             idx, values = zip(*line)
             dataframe.loc[list(idx), [day]] = pd.Series(values, list(idx))
         for index, day in enumerate(self.get_info(lambda x: x.find_element(By.CSS_SELECTOR, 'h5').text.capitalize())):
             dataframe = dataframe.rename(columns={index: day})
-        dataframe = dataframe.fillna('-')
+        # dataframe = dataframe.fillna('-')
         return dataframe
 
     def __enter__(self):
@@ -55,3 +77,4 @@
 
     def __exit__(self, exc_type, exc_val, exc_tb):
         self.driver.quit()
+
Index: saver.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>class Saver():\r\n    def save_sql(self):\r\n        pass\r\n\r\n    def save_json(self):\r\n        pass\r\n\r\n    def save_csv(self):\r\n        pass
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>windows-1251
===================================================================
diff --git a/saver.py b/saver.py
--- a/saver.py	(revision fb02eb430d76b190e13ecb8e978c091f5ce720d1)
+++ b/saver.py	(date 1664793465568)
@@ -1,9 +1,13 @@
-class Saver():
-    def save_sql(self):
-        pass
-
-    def save_json(self):
-        pass
-
-    def save_csv(self):
-        pass
\ No newline at end of file
+# import pandas as pd
+#
+# class Saver():
+#     def __init__(self):
+#         df = pd
+#     def save_sql(self):
+#
+#
+#     def save_json(self):
+#         pass
+#
+#     def save_csv(self):
+#         pass
\ No newline at end of file
Index: constants.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>time = ['1 пара 08:30 10:00', '2 пара 10:10 11:40', '3 пара 11:50 13:20', '4 пара 14:00 15:30', '5 пара 15:40 17:10', '6 пара 17:20 18:50', '7 пара 18:55 20:25', '8 пара 20:30 22:00']\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/constants.py b/constants.py
--- a/constants.py	(revision fb02eb430d76b190e13ecb8e978c091f5ce720d1)
+++ b/constants.py	(date 1664816195271)
@@ -1,1 +1,4 @@
-time = ['1 пара 08:30 10:00', '2 пара 10:10 11:40', '3 пара 11:50 13:20', '4 пара 14:00 15:30', '5 пара 15:40 17:10', '6 пара 17:20 18:50', '7 пара 18:55 20:25', '8 пара 20:30 22:00']
+time = ['1 пара 08:30 10:00', '2 пара 10:10 11:40', '3 пара 11:50 13:20', '4 пара 14:00 15:30', '5 пара 15:40 17:10',
+        '6 пара 17:20 18:50', '7 пара 18:55 20:25', '8 пара 20:30 22:00']
+calendar_id = '5bbb23ea64f80456fb760707752c52beae7c217258745cc06c78c5f999c8f530@group.calendar.google.com'
+days = ['Понедельник', 'Вторник', 'Среда', "Четверг", "Пятница", "Суббота"]
\ No newline at end of file
